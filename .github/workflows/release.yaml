name: release

on:
  push:
    tags:
      - "[0-9]+\\.[0-9]+\\.[0-9]+"
      - "[0-9]+\\.[0-9]+\\.[0-9]+a[0-9]+"
      - "[0-9]+\\.[0-9]+\\.[0-9]+b[0-9]+"
      - "[0-9]+\\.[0-9]+\\.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: "xcbench"   # Replace with your actual package name
  OWNER: "your-github-username"  # Replace with your GitHub username
  TAP_NAME: "your-homebrew-tap"  # Optional, if using Homebrew formula updates

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract tag and details
        id: release
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
          SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Check PyPI for latest version
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_version=$(echo "$response" | jq -r '.releases | keys_unsorted | last')
          latest_version=${latest_version:-0.0.0}
          echo "latest_previous_version=$latest_version" >> $GITHUB_ENV
          echo "Latest on PyPI: $latest_version"

      - name: Compare versions
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          if [ "$(printf '%s\n' "$latest_previous_version" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ]; then
            echo "New version $NEW_VERSION is not newer than $latest_previous_version"
            exit 1
          fi

  setup_and_build:
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set project version
        run: poetry version ${{ needs.details.outputs.new_version }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Build dist
        run: poetry build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Publish to PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # Required for Trusted Publishing v4
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI (trusted)
        uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    name: GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} dist/* \
            --title "${{ needs.details.outputs.tag_name }}" --generate-notes

  bump_homebrew_formula:
    name: Trigger Homebrew Tap
    needs: [details, github_release, pypi_publish]
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Dispatch Homebrew Tap Update
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.BREW_TAP_TOKEN }}
          repository: ${{ env.OWNER }}/${{ env.TAP_NAME }}
          event-type: "update-formula"
          client-payload: |-
            {
              "formula_version": "${{ needs.details.outputs.new_version }}",
              "formula_url": "https://github.com/${{ env.OWNER }}/${{ env.PACKAGE_NAME }}/releases/download/${{ needs.details.outputs.new_version }}/${{ env.PACKAGE_NAME }}-${{ needs.details.outputs.new_version }}.tar.gz",
              "formula_name": "${{ env.PACKAGE_NAME }}"
            }

